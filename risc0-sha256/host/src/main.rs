// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use bincode;
use methods::{RISC0SHA_ELF, RISC0SHA_ID};
use risc0_groth16::docker::stark_to_snark;
use risc0_zkvm::{
    default_prover, get_prover_server, recursion::identity_p254, CompactReceipt, ExecutorEnv,
    ExecutorImpl, InnerReceipt, ProverOpts, Receipt, VerifierContext,
};

fn main() {
    #[cfg(feature="groth16")]
    snark2stark();
    #[cfg(not(feature="groth16"))]
    default();
}

fn default(){
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();
    // use default prover to generate proof
}

#[cfg(feature = "groth16")]
fn snark2stark() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let env = ExecutorEnv::builder().build().unwrap();
    let mut exec = ExecutorImpl::from_elf(env, RISC0SHA_ELF).unwrap();
    let session = exec.run().unwrap();
    let opts = ProverOpts::default();
    let ctx = VerifierContext::default();
    let prover = get_prover_server(&opts).unwrap();
    let receipt = prover.prove_session(&ctx, &session).unwrap();

    let claim = receipt.get_claim().unwrap();
    let composite_receipt = receipt.inner.composite().unwrap();
    let succinct_receipt = prover.compress(composite_receipt).unwrap();
    let journal = session.journal.unwrap().bytes;

    println!("identity_p254");
    let ident_receipt = identity_p254(&succinct_receipt).unwrap();
    let seal_bytes = ident_receipt.get_seal_bytes();

    println!("stark-to-snark");
    let seal = stark_to_snark(&seal_bytes).unwrap().to_vec();

    println!("Receipt");
    let receipt = Receipt::new(
        InnerReceipt::Compact(CompactReceipt { seal, claim }),
        journal,
    );
    let receipt_serialized = bincode::serialize(&receipt);
    println!("Proof size: {:?}", &receipt_serialized.unwrap().len());
    let output = receipt.verify(RISC0SHA_ID).unwrap();
}