// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use bincode;
use methods::{RISC0SHA_ELF, RISC0SHA_ID};
use risc0_groth16::docker::stark_to_snark;
use risc0_zkvm::{
    default_prover, get_prover_server, recursion::identity_p254, CompactReceipt, ExecutorEnv,
    ExecutorImpl, InnerReceipt, ProverOpts, Receipt, VerifierContext,
};
use serde::Serialize;

use chrono::{DateTime, TimeZone, Utc};

fn main() {
    let test_vectors: Vec<u32> = vec![10, 100, 1000];
    for rounds in test_vectors{
        let start_time: i64 = Utc::now().timestamp();
        #[cfg(feature="groth16")]
        snark2stark(rounds);
        #[cfg(not(feature="groth16"))]
        default(rounds);
        let runtime = Utc::now().timestamp() - start_time;
        println!("[Risc0 SHA256 Benchmark] Total runtime: {:?}, rounds of sha256: {:?}", runtime, rounds);
    }
}

fn default(rounds: u32){
    let env = ExecutorEnv::builder()
    .write(&rounds)
    .unwrap()
    .build()
    .unwrap();

    let prover = default_prover();
    let receipt = prover.prove(env, RISC0SHA_ELF).unwrap();
    println!("Proof size: {:?}", &bincode::serialize(&receipt).unwrap().len());
    receipt.verify(RISC0SHA_ID).expect("Failed to verify proof!");
}

#[cfg(feature = "groth16")]
fn snark2stark(rounds: u32) {
    let env = ExecutorEnv::builder()
        .write(&rounds)
        .unwrap()
        .build()
        .unwrap();
    let mut exec = ExecutorImpl::from_elf(env, RISC0SHA_ELF).unwrap();
    let session = exec.run().unwrap();
    let opts = ProverOpts::default();
    let ctx = VerifierContext::default();
    let prover = get_prover_server(&opts).unwrap();
    let receipt = prover.prove_session(&ctx, &session).unwrap();

    let claim = receipt.get_claim().unwrap();
    let composite_receipt = receipt.inner.composite().unwrap();
    let succinct_receipt = prover.compress(composite_receipt).unwrap();
    let journal = session.journal.unwrap().bytes;

    println!("identity_p254");
    let ident_receipt = identity_p254(&succinct_receipt).unwrap();
    let seal_bytes = ident_receipt.get_seal_bytes();

    println!("stark-to-snark");
    let seal = stark_to_snark(&seal_bytes).unwrap().to_vec();

    println!("Receipt");
    let receipt = Receipt::new(
        InnerReceipt::Compact(CompactReceipt { seal, claim }),
        journal,
    );
    let receipt_serialized = bincode::serialize(&receipt);
    println!("Proof size: {:?}", &receipt_serialized.unwrap().len());
    let output = receipt.verify(RISC0SHA_ID).unwrap();
}
